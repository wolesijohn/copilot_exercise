clues = [
    "There is a faded photograph of a grand ballroom filled with elegantly dressed people.",
    "There is a scorched mark on the floor, hinting at a past fire.",
    "There is a dusty old book with pages missing, suggesting a story half-told.",
    "There is a shattered mirror, its pieces reflecting a room that seems different from the one you're in.",
    "There is a worn-out map with certain locations marked, indicating a journey taken long ago.",
    "There is a cryptic message etched into the wall, its meaning lost to time.",
    "There is a rusted key, too old and fragile to fit any modern lock.",
    "There is a painting of a stormy sea, hinting at past tumultuous events.",
    "There is a single feather, a silent testament to a bird that once might have been here.",
    "There is a set of footprints in the dust, leading to nowhere in particular."
]
sense_exp = [
    "You see a flickering candlelight casting long, dancing shadows on the stone walls.",
    "You hear the distant echo of footsteps, but you can't tell where they're coming from.",
    "You smell the musty scent of old books and parchment, mixed with a hint of damp stone.",
    "You touch the cold, rough surface of the stone wall, feeling the weight of centuries under your fingertips.",
    "You sense an eerie stillness, as if the room is holding its breath.",
    "You see a cobweb in the corner, shimmering in the dim light, untouched for years.",
    "You hear the soft, mournful hoot of an owl somewhere in the distance.",
    "You smell a faint, sweet scent, like roses left to wither in a forgotten vase.",
    "You touch the worn velvet of a chair, imagining the many who might have sat here before you.",
    "You sense a chill running down your spine, an unexplainable feeling of being watched.",
    "You see the moonlight filtering through a crack in the window, casting a silver glow on the floor.",
    "You hear the wind howling outside, its voice echoing through the empty halls."
]
from enum import Enum
import random

class RandomItemSelector:
    def __init__(self, items):
        self.items = items
        self.used_items = []

    def add_item(self, item):
        self.items.append(item)

    def pull_random_item(self):
        if not self.items:
            return None
        if len(self.used_items) == len(self.items):
            self.reset()
        item = random.choice(self.items)
        while item in self.used_items:
            item = random.choice(self.items)
        self.used_items.append(item)
        return item

    def reset(self):
        self.used_items = []

class SenseClueGenerator:
    _instance = None

    def __new__(cls, clues, sense_exp):
        if cls._instance is None:
            cls._instance = super(SenseClueGenerator, cls).__new__(cls)
            cls._instance.clue_selector = RandomItemSelector(clues)
            cls._instance.sense_selector = RandomItemSelector(sense_exp)
        return cls._instance

    def get_senseclue(self):
        clue = self.clue_selector.pull_random_item()
        sense = self.sense_selector.pull_random_item()
        return f"{clue} {sense}"

from abc import ABC, abstractmethod
from enum import Enum

class EncounterOutcome(Enum):
    CONTINUE = 1
    END = 2

class Encounter(ABC):
    @abstractmethod
    def run_encounter(self):
        pass

class DefaultEncounter(Encounter):
    def __init__(self, clues, sense_exp):
        self.sense_clue_generator = SenseClueGenerator(clues, sense_exp)

    def run_encounter(self):
        sense_clue = self.sense_clue_generator.get_senseclue()
        print(sense_clue)
        return EncounterOutcome.CONTINUE
class Room:
    def __init__(self, name, encounter):
        self.name = name
        self.encounter = encounter

    def visit_room(self):
        return self.encounter.run_encounter()
    
# Define the room names
room_names = ["Throne Room", "Armory", "Library", "Dungeon", "Observatory", "Royal Chamber"]

# Create the rooms
rooms = [Room(name, DefaultEncounter(clues, sense_exp)) for name in room_names]
class TreasureEncounter(Encounter):
    def run_encounter(self):
        print("Congratulations! You have found the treasure and won the game!")
        return EncounterOutcome.END

rooms.append(Room("Treasure Room",TreasureEncounter()))

import random

class WizardEncounter(Encounter):
    def run_encounter(self):
        game_rules = {
            "Fireball": ["Ice Shard", "Lightning Bolt"],
            "Ice Shard": ["Wind Gust", "Earthquake"],
            "Wind Gust": ["Lightning Bolt", "Fireball"],
            "Lightning Bolt": ["Earthquake", "Ice Shard"],
            "Earthquake": ["Fireball", "Wind Gust"]
        }

        while True:
            wizard_choice = random.choice(list(game_rules.keys()))
            user_choice = input("Choose your spell (Fireball, Ice Shard, Wind Gust, Lightning Bolt, Earthquake): ")

            if user_choice not in game_rules:
                print("Invalid spell. Please choose again.")
                continue

            print(f"The wizard casts {wizard_choice}.")

            if user_choice == wizard_choice:
                print("It's a draw! Play again.")
            elif user_choice in game_rules[wizard_choice]:
                print("The wizard's spell overpowers you. You have been defeated.")
                return EncounterOutcome.END
            else:
                print("Your spell overpowers the wizard. You have defeated the wizard.")
                return EncounterOutcome.CONTINUE
rooms.append(Room("The Red Wizard's Lair", WizardEncounter()))
import random



class BlueWizardEncounter(Encounter):
    def run_encounter(self):
        game_rules = {
            "Frost Nova": ["Arcane Missile", "Shadow Bolt"],
            "Arcane Missile": ["Shadow Bolt", "Frost Nova"],
            "Shadow Bolt": ["Frost Nova", "Arcane Missile"]
        }

        while True:
            wizard_choice = random.choice(list(game_rules.keys()))
            user_choice = input("Choose your spell (Frost Nova, Arcane Missile, Shadow Bolt): ")

            if user_choice not in game_rules:
                print("Invalid spell. Please choose again.")
                continue

            print(f"Blue Wizard casts {wizard_choice}.")

            if user_choice == wizard_choice:
                print("It's a draw! Play again.")
            elif user_choice in game_rules[wizard_choice]:
                print("You have been vanquished from this castle.")
                return EncounterOutcome.END
            else:
                print("You have vanquished the Blue Wizard from this castle.")
                return EncounterOutcome.CONTINUE
rooms.append(Room("The Blue Wizard's Lair", BlueWizardEncounter()))

class Castle:
    def __init__(self, rooms):
        self.room_selector = RandomItemSelector(rooms)

    def select_door(self):
        door_count = random.randint(2, 4)
        print(f"There are {door_count} doors. Choose a door number between 1 and {door_count}.")

        while True:
            door_number = input("Your choice: ")
            if door_number.isdigit() and 1 <= int(door_number) <= door_count:
                return int(door_number)
            else:
                print(f"Invalid input. Please enter a number between 1 and {door_count}.")

    def next_room(self):
        self.select_door()
        room = self.room_selector.pull_random_item()
        print(f"You have entered the {room.name}.")
        return room.visit_room()

    def reset(self):
        self.room_selector.reset()





class Game:
    def __init__(self, rooms):
        self.castle = Castle(rooms)

    def play_game(self):
        print("Welcome to the game! Your objective is to navigate through the castle and find the treasure.")
        while True:
            outcome = self.castle.next_room()
            if outcome == EncounterOutcome.END:
                self.castle.reset()
                print("Game Over")
                play_again = input("Would you like to explore a different castle? (yes/no) ")
                if play_again.lower() != "yes":
                    break# Assuming you have defined your rooms and the Castle class


game = Game(rooms)
game.play_game()